-
  Change the contract of the Employee to ensure the test will happen during the contract
-
 !python {model: hr.contract}: |
   import time
   self.write(cr, uid, [ref('al_contract')], {'date_start': time.strftime('%Y-%m-01')}, context=context)
-
  First of all, Employee Sign's In.
-
  !record {model: hr.attendance, id: hr_attendance_0}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-11 08:00:00')
    action: 'sign_in'
-
  Employee Sign's Out.
-
  !record {model: hr.attendance, id: hr_attendance_1}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-11 12:15:00')
    action: 'sign_out'
-
  I check the attendance data.
-
   !python {model: hr.attendance}: |
     import time
     att_0 = self.browse(cr, uid, ref('hr_attendance_0'), context=context)
     assert att_0.duration == 4.25, "Attendance duration must be 4:15, but it's %s" % att_0.duration
     end_datetime = time.strftime('%Y-%m-11 12:15:00')
     assert att_0.end_datetime == end_datetime, "Attendance end must be 11:50:00, but it's %s" % att_0.end_datetime
     assert att_0.outside_calendar_duration == 0.25, "Overtime must be 0:15, but it's %s" % att_0.outside_calendar_duration
     assert att_0.inside_calendar_duration == 4, "Inside calendar be 4, but it's %s" % att_0.inside_calendar_duration
-
  I assign the dates in the holiday request.
-
  !record {model: hr.holidays, id: hr_holiday1}:
    name: Sick Leave
    holiday_status_id: hr_holidays.holiday_status_cl
    date_from: !eval time.strftime('%Y-%m-11 12:30:00')
    date_to: !eval time.strftime('%Y-%m-11 18:00:00')
    employee_id: hr.employee_fp
    type: remove
-
  I validate the holiday request by clicking on "To Approve" button.
-
  !workflow {model: hr.holidays, action: validate,  ref: hr_holiday1}
-
  I create the calendar analysis wizard
-
  !record {model: attendance_analysis.wizard.calendar_report, id: calendar_report_1, view: wizard_calendar_report}:
    employee_ids:
      - hr.employee_fp
    from_date: !eval time.strftime('%Y-%m-11')
    to_date: !eval time.strftime('%Y-%m-11')
-
  I run the calendar analysis report
-
  !python {model: attendance_analysis.wizard.calendar_report}: |
    wizard = self.browse(cr, uid, ref('calendar_report_1'), context=context)
    action = self.print_calendar(cr, uid, [ref('calendar_report_1')], context=context)
    fp_data = action['datas']['form']['totals_by_employee'][str(ref('hr.employee_fp'))]
    assert fp_data['total_leaves'] == '05:00', "Total leaves must be 05:00, %s found" % fp_data['total_leaves']
    assert fp_data['total_overtime'] == '00:15', "Total overtime must be 00:15, %s found" % fp_data['total_overtime']
    assert fp_data['total_due'] == '09:00', "Total due must be 09:00, %s found" % fp_data['total_due']
    assert fp_data['total_negative'] == '00:00', "Total negative must be 00:00, %s found" % fp_data['total_negative']
-
  I sign in the second day (morning)
-
  !record {model: hr.attendance, id: hr_attendance_2}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-12 08:00:00')
    action: 'sign_in'
-
  I sign out the second day (morning)
-
  !record {model: hr.attendance, id: hr_attendance_3}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-12 11:50:00')
    action: 'sign_out'
-
  I sign in the second day (afternoon)
-
  !record {model: hr.attendance, id: hr_attendance_4}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-12 12:45:00')
    action: 'sign_in'
-
  I sign out the second day (afternoon)
-
  !record {model: hr.attendance, id: hr_attendance_5}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-12 18:00:00')
    action: 'sign_out'
-
  I check the attendance data.
-
   !python {model: hr.attendance}: |
     import time
     from datetime import datetime, timedelta
     att_2 = self.browse(cr, uid, ref('hr_attendance_2'), context=context)
     assert att_2.duration == 3.83, "Attendance duration must be 3:50, but it's %s" % att_2.duration
     end_datetime = time.strftime('%Y-%m-12 11:50:00')
     assert att_2.end_datetime == end_datetime, "Attendance end must be 11:50:00, but it's %s" % att_2.end_datetime
     assert att_2.outside_calendar_duration == 0, "Overtime must be 0:00, but it's %s" % att_2.outside_calendar_duration
     assert att_2.inside_calendar_duration == 3.83, "Inside calendar must be 3:50, but it's %s" % att_2.inside_calendar_duration
     att_4 = self.browse(cr, uid, ref('hr_attendance_4'), context=context)
     assert att_4.duration == 5.25, "Attendance duration must be 5:15, but it's %s" % att_4.duration
     end_datetime = time.strftime('%Y-%m-12 18:00:00')
     assert att_4.end_datetime == end_datetime, "Attendance end must be 18:00:00, but it's %s" % att_4.end_datetime
     assert att_4.outside_calendar_duration == 0.25, "Overtime must be 0:15, but it's %s" % att_4.outside_calendar_duration
     assert att_4.inside_calendar_duration == 5, "Inside calendar must be 5:00, but it's %s" % att_4.inside_calendar_duration
-
  I create the calendar analysis wizard
-
  !record {model: attendance_analysis.wizard.calendar_report, id: calendar_report_2, view: wizard_calendar_report}:
    employee_ids:
      - hr.employee_fp
    from_date: !eval time.strftime('%Y-%m-12')
    to_date: !eval time.strftime('%Y-%m-12')
-
  I run the calendar analysis report
-
  !python {model: attendance_analysis.wizard.calendar_report}: |
    wizard = self.browse(cr, uid, ref('calendar_report_2'), context=context)
    action = self.print_calendar(cr, uid, [ref('calendar_report_2')], context=context)
    fp_data = action['datas']['form']['totals_by_employee'][str(ref('hr.employee_fp'))]
    assert fp_data['total_leaves'] == '00:00', "Total leaves must be 00:00, %s found" % fp_data['total_leaves']
    assert fp_data['total_overtime'] == '00:15', "Total overtime must be 00:15, %s found" % fp_data['total_overtime']
    assert fp_data['total_due'] == '09:00', "Total due must be 09:00, %s found" % fp_data['total_due']
    assert fp_data['total_negative'] == '00:10', "Total negative must be 00:10, %s found" % fp_data['total_negative']
